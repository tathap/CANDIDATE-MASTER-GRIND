#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>
#include <stack>
#include <queue>
#include <math.h>
#include <set>
#include <map>
#include <string>
#include <tuple>
#include <numeric>
#include <climits>
#include <bitset>
#include <iomanip>
#include <random>
#include <ctime>
using namespace std;

//change the long long to int if you need to save memory/time really badly
typedef long long ll;
typedef long double ld;

const ll MAXN = 2005;
const ll INF = 1e16;
const ll MOD = 1e9 + 7;

ll __gcd(ll a, ll b) {
    if (b == 0) {
        return a;
    }
    
    if (a == 0) {
        return b;
    }
    
    if (a < b) {
        swap(a, b);
    }
    
    return __gcd(b, a % b);
}

void solve(ll ca)
{
    ll n, k;
    cin >> n >> k;
    
    string s, t;
    cin >> s >> t;
    
    //Handle case where t[0] == t[1]
    if (t[0] == t[1]) {
        ll numb = 0;
        for (ll i = 0; i < n; ++i) {
            if (s[i] == t[0]) {
                ++numb;
            }
        }
        
        numb = min(numb+k, n);
        cout << numb*(numb-1)/2 << endl;
        return;
    }
    
    ll dp[k+1][n+1]; //dp[i][j][l] is the max #of occurences using first i characters using j moves with l copies of t[0]
    for (ll i = 0; i <= k; i++) {
        for (ll j = 0; j <= n; j++) {
            dp[i][j] = -INF;
        }
    }
    
    dp[0][0] = 0;
    
    for (ll i = 1; i <= n; i++) {
        ll dp2[k+1][n+1];
        for (ll a = 0; a <= k; a++) {
            for (ll b = 0; b <= n; b++) {
                dp2[a][b] = -INF;
            }
        }
        
        for (ll a = 0; a <= k; a++) {
            for (ll b = 0; b <= n; b++) {
                //use a move at this position to turn cur char into a t[0]
                if (a > 0 && b > 0) {
                    dp2[a][b] = dp[a-1][b-1];
                }
                
                //use a move at this position to turn cur char into a t[1]
                if (a > 0 && dp[a-1][b] != -INF) {
                    dp2[a][b] = max(dp2[a][b], dp[a-1][b] + b);
                }
                
                //don't use a move at this position
                if (s[i-1] == t[0]) {
                    if (b > 0) {
                        dp2[a][b] = max(dp2[a][b], dp[a][b-1]);
                    }
                } else if (s[i-1] == t[1]) {
                    if (dp[a][b] != -INF) {
                        dp2[a][b] = max(dp2[a][b], dp[a][b] + b);
                    }
                } else {
                    dp2[a][b] = max(dp2[a][b], dp[a][b]);
                }
            }
        }
        
        for (ll a = 0; a <= k; a++) {
            for (ll b = 0; b <= n; b++) {
                dp[a][b] = dp2[a][b];
            }
        }
    }
    
    ll ans = -INF;
    for (ll i = 0; i <= k; i++) {
        for (ll j = 0; j <= n; j++) {
            ans = max(ans, dp[i][j]);
        }
    }
    
    cout << ans << endl;
}

int main()
{
    //mt19937 rng(0);
    
    //Fast IO
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    
    /*
     freopen("sabotage.in", "r", stdin);
     freopen("sabotage.out", "w", stdout);
     */

    ll t = 1;
    //cin >> t;
    
    ll co = 1;
    while (t--) {
        solve(co);
        ++co;
    }
}
