#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>
#include <stack>
#include <queue>
#include <math.h>
#include <set>
#include <map>
#include <string>
#include <tuple>
#include <numeric>
#include <climits>
#include <bitset>
#include <iomanip>
#include <random>
#include <ctime>
using namespace std;

//change the long long to int if you need to save memory/time really badly
typedef long long ll;
typedef long double ld;

const ll MAXN = 2005;
const ll INF = 1e16;
const ll MOD = 1e9 + 7;

ll __gcd(ll a, ll b) {
    if (b == 0) {
        return a;
    }
    
    if (a == 0) {
        return b;
    }
    
    if (a < b) {
        swap(a, b);
    }
    
    return __gcd(b, a % b);
}

void solve(ll ca)
{
    string s; cin >> s;
    ll x, y;
    cin >> x >> y;
    
    ll n = s.length();
    ll cnt = 0; //#of question marks
    for (ll i = 0; i < n; i++) {
        if (s[i] == '?') {
            ++cnt;
        }
    }
    
    //If x > y, swap
    if (x > y) {
        swap(x, y);
        for (ll i = 0; i < n; i++) {
            if (s[i] == '0') {
                s[i] = '1';
            } else if (s[i] == '1') {
                s[i] = '0';
            }
        }
    }
    
    
    ll __0 = 0; ll __1 = 0;
    ll ans = 0; //Compute answwer ignoring question marks
    for (ll i = 0; i < n; i++) {
        if (s[i] == '0') {
            ans += (__1 * y);
            __0++;
        } else if (s[i] == '1') {
            ans += (__0 * x);
            __1++;
        }
    }
    
    //If there aren't any question marks, just print the answer
    if (cnt == 0) {
        cout << ans << endl;
        return;
    }
        
    //ps[i] is the #of 0's and 1's respectively in indices [0, i]
    //ss[i] is the #of 0's and 1's respectively in indices [i, n-1]
    
    //Compute ps and ss
    pair<ll, ll> ps[n], ss[n];
    for (ll i = 0; i < n; i++) {
        if (i == 0) {
            ps[i] = {0, 0};
        } else {
            ps[i] = ps[i-1];
        }
        
        if (s[i] == '0') {
            ps[i].first++;
        } else if (s[i] == '1') {
            ps[i].second++;
        }
    }
    
    for (ll i = n-1; i >= 0; i--) {
        if (i == n-1) {
            ss[i] = {0, 0};
        } else {
            ss[i] = ss[i+1];
        }
        
        if (s[i] == '0') {
            ss[i].first++;
        } else if (s[i] == '1') {
            ss[i].second++;
        }
    }
        
    //psum[i] is the cost of setting the first i question marks to be 0's. Note that this cost results from
    //pairing the 0's with 1's to the left and right. We'll ignore the remaining suffix of question marks for now
    ll ind = 0;
    ll psum[cnt];
    for (ll i = 0; i < n; i++) {
        if (s[i] == '?') {
            if (ind == 0) {
                psum[ind] = 0;
            } else {
                psum[ind] = psum[ind-1];
            }
            
            //prefix [0, ind] suffix [ind+1, cnt]
            psum[ind] += (ps[i].second*y);
            psum[ind] += (ss[i].second*x);
            ind++;
        }
    }
    
    //ssum[i] is the cost of setting the last n-i question marks to be 1's. Note that this cost results from
    //pairing the 1's with 0's to the left and right. We'll ignore the remaining suffix of question marks for now
    ind = cnt-1;
    ll ssum[cnt];
    for (ll i = n-1; i >= 0; i--) {
        if (s[i] == '?') {
            if (ind == cnt-1) {
                ssum[ind] = 0;
            } else {
                ssum[ind] = ssum[ind+1];
            }
            
            ssum[ind] += (ss[i].first*y);
            ssum[ind] += (ps[i].first*x);
            ind--;
        }
    }
        
    //Pair every non-negative sized prefix of 0's with the matching suffix of 1's and get min cost
    ll ret = INF;
    ind = 0;
    for (ll i = 0; i < n; i++) {
        if (s[i] == '?') {
            ll tans = ans + psum[ind];
            if (ind+1 < cnt) {
                tans += ssum[ind+1];
            }
            
            //Add the cost of the 0's from the question marks on the left pairing with the 1's from the question marks on the right
            tans += ((ind+1)*(cnt-ind-1)*x);
            ret = min(ret, tans);
            ind++;
        }
    }
    
    //Check final case where all question marks are just 0's
    ret = min(ret, ans+ssum[0]);
    cout << ret << endl;
}

int main()
{
    //mt19937 rng(0);
    
    //Fast IO
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    
    /*
     freopen("sabotage.in", "r", stdin);
     freopen("sabotage.out", "w", stdout);
     */

    ll t = 1;
    //cin >> t;
    
    ll co = 1;
    while (t--) {
        solve(co);
        ++co;
    }
}
