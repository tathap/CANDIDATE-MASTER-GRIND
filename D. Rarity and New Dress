#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>
#include <stack>
#include <queue>
#include <math.h>
#include <set>
#include <map>
#include <string>
#include <tuple>
#include <numeric>
#include <climits>
#include <bitset>
#include <iomanip>
#include <random>
#include <ctime>
using namespace std;

//change the long long to int if you need to save memory/time really badly
typedef long long ll;
typedef long double ld;

const ll MAXN = 2005;
const ll INF = 1e14;
const ll MOD = 1e9 + 7;

ll __gcd(ll a, ll b) {
    if (b == 0) {
        return a;
    }
    
    if (a == 0) {
        return b;
    }
    
    if (a < b) {
        swap(a, b);
    }
    
    return __gcd(b, a % b);
}

void solve(ll ca)
{
    ll n, m;
    cin >> n >> m;
    
    char grid[n][m];
    for (ll i = 0; i < n; i++) {
        for (ll j = 0; j < m; j++) {
            cin >> grid[i][j];
        }
    }
    
    ll dp[4][n][m];
    
    //Compute top-left triangles
    for (ll i = 0; i < n; i++) {
        for (ll j = 0; j < m; j++) {
            if (i == 0 || j == 0) {
                dp[0][i][j] = 1;
            } else {
                if (grid[i-1][j] != grid[i][j] || grid[i][j-1] != grid[i][j]) {
                    dp[0][i][j] = 1;
                } else {
                    dp[0][i][j] = min(dp[0][i-1][j], dp[0][i][j-1]) + 1;
                }
            }
        }
    }
    
    //Do the other 3 types of triangles
    for (ll i = n-1; i >= 0; i--) {
        for (ll j = 0; j < m; j++) {
            if (i == n-1 || j == 0) {
                dp[1][i][j] = 1;
            } else {
                if (grid[i+1][j] != grid[i][j] || grid[i][j-1] != grid[i][j]) {
                    dp[1][i][j] = 1;
                } else {
                    dp[1][i][j] = min(dp[1][i+1][j], dp[1][i][j-1]) + 1;
                }
            }
        }
    }
    
    for (ll i = 0; i < n; i++) {
        for (ll j = m-1; j >= 0; j--) {
            if (i == 0 || j == m-1) {
                dp[2][i][j] = 1;
            } else {
                if (grid[i-1][j] != grid[i][j] || grid[i][j+1] != grid[i][j]) {
                    dp[2][i][j] = 1;
                } else {
                    dp[2][i][j] = min(dp[2][i-1][j], dp[2][i][j+1]) + 1;
                }
            }
        }
    }
    
    for (ll i = n-1; i >= 0; i--) {
        for (ll j = m-1; j >= 0; j--) {
            if (i == n-1 || j == m-1) {
                dp[3][i][j] = 1;
            } else {
                if (grid[i+1][j] != grid[i][j] || grid[i][j+1] != grid[i][j]) {
                    dp[3][i][j] = 1;
                } else {
                    dp[3][i][j] = min(dp[3][i+1][j], dp[3][i][j+1]) + 1;
                }
            }
        }
    }
    
    //Get answer by combining the values of all 4 types of triangles for each cell and summing that up for all cells
    ll ans = 0;
    for (ll i = 0; i < n; i++) {
        for (ll j = 0; j < m; j++) {
            ans += min(min(dp[0][i][j], dp[1][i][j]), min(dp[2][i][j], dp[3][i][j]));
        }
    }
    
    cout << ans << endl;
}

int main()
{
    //mt19937 rng(0);
    
    //Fast IO
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    
    /*
     freopen("sabotage.in", "r", stdin);
     freopen("sabotage.out", "w", stdout);
     */

    ll t = 1;
    //cin >> t;
    
    ll co = 1;
    while (t--) {
        solve(co);
        ++co;
    }
}
