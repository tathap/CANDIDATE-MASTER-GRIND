/*#pragma GCC optimize("Ofast,unroll-loops")
#pragma GCC target("avx,avx2,fma")
*/
#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>
#include <stack>
#include <queue>
#include <math.h>
#include <set>
#include <map>
#include <string>
#include <tuple>
#include <numeric>
#include <climits>
#include <bitset>
#include <iomanip>
#include <random>
#include <ctime>
 
using namespace std;
 
//change the long long to int if you need to save memory/time really badly
typedef long long ll;
 
const ll MAXN = 2e5 + 5;
const ll INF = 1e16;

void solve(ll ca)
{
    ll n, k;
    cin >> n >> k;
    
    ll a[n];
    for (ll i = 0; i < n; i++) {
        cin >> a[i];
    }
    
    ll lo = 1; ll hi = n;
    lo--;
    while (lo < hi) {
        ll mid = lo + (hi - lo + 1)/2;
        
        ll b[n];
        for (ll i = 0; i < n; i++) {
            if (a[i] < mid) {
                b[i] = -1;
            } else {
                b[i] = 1;
            }
        }
        
        ll pref[n+1]; ll minpref[n+1];
        pref[0] = 0; minpref[0] = 0;
        for (ll i = 0; i < n; i++) {
            pref[i+1] = pref[i] + b[i];
            minpref[i+1] = min(minpref[i], pref[i+1]);
        }
        
        bool works = false;
        for (ll i = k; i <= n; i++) {
            ll tsum = pref[i] - minpref[i-k];
            if (tsum > 0) {
                works = true;
                break;
            }
        }
        
        if (works) {
            lo = mid;
        } else {
            hi = mid-1;
        }
    }
    
    cout << lo << endl;
}
 
int main()
{
    mt19937 rng(0);
    
    //Fast IO
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
 
    ll t = 1;
    //cin >> t;
    
    ll co = 1;
    while (t--) {
        solve(co);
        ++co;
    }
}
