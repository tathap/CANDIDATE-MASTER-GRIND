#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>
#include <stack>
#include <queue>
#include <math.h>
#include <set>
#include <map>
#include <string>
#include <tuple>
#include <numeric>
#include <climits>
#include <bitset>
#include <iomanip>
#include <random>
#include <ctime>
using namespace std;

//change the long long to int if you need to save memory/time really badly
typedef long long ll;
typedef long double ld;

const ll MAXN = 2005;
const ll INF = 1e16;
const ll MOD = 1e9 + 7;

ll __gcd(ll a, ll b) {
    if (b == 0) {
        return a;
    }
    
    if (a == 0) {
        return b;
    }
    
    if (a < b) {
        swap(a, b);
    }
    
    return __gcd(b, a % b);
}

ll a, b, c, d;

//Compute the total sum of all health/damage dealt to the monster in prefix val
ll works(ll val) {
    ll numb = val+1;
    ll tsum = -1 * numb * a;
    tsum += (numb*b*c);
        
    ll numbertimes = (c+d-1)/d;
    numbertimes = min(numbertimes, val+1);
    ll amt = c*numbertimes - (d*(numbertimes-1)*(numbertimes)/2);
    amt *= b;
    
    
    tsum -= amt;
    
    return tsum;
}

void solve(ll ca)
{
    cin >> a >> b >> c >> d;
    
    //Check case where moves don't overlap
    if (c < d) {
        ll sum = b*c - a;
        if (sum < 0) {
            cout << -1 << endl;
            return;
        }
        
        cout << a << endl;
        return;
    }
    

    //Ternary search on best prefix to use
    ll lo = 0; ll hi = 1e10;
    hi++;
    
    while (lo < hi) {
        ll mid = lo + (hi - lo)/2;

        if (works(mid) <= works(mid+1)) {
            hi = mid;
        } else {
            lo = mid+1;
        }
    }
    
    //If we reach 1e10, then it's obvious that the sequence is always decreasing and we can kill any monster.
    if (lo-1 == 1e10) {
        cout << -1 << endl;
        return;
    }
    
    //Print -1 times the total damage you dealt in the optimal prefix. This is the max health a monster can have while still dying.
    cout << -1*works(lo) << endl;
}

int main()
{
    //mt19937 rng(0);
    
    //Fast IO
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    
    /*
     freopen("sabotage.in", "r", stdin);
     freopen("sabotage.out", "w", stdout);
     */

    ll t = 1;
    cin >> t;
    
    ll co = 1;
    while (t--) {
        solve(co);
        ++co;
    }
}
